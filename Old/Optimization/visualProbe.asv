function visualProbe(probe,graphs)
    amp = probe.Amp;
    coil = probe.Coil;
    Freqs = probe.Freqs;
    if strcmp(probe.Type,'Tuned')
        matchNetw = probe.MatchNetw;
    end
    if tuned 
        [~, tprobe] = sensTunedLinv(amp,coil,Freqs,matchNetw,graphs);
        tprobe.Type = 'Tuned';
        tprobe.Coil.PspiceFreqDep = abs(mean(tprobe.Coil.Emf_per_T./(2*pi*tprobe.Freqs.Freqs)));        
        disp(['Tuned probe, StrandNr = ' num2str(tprobe.Coil.LitzStrandNr_glob)])
        disp(['Estimated optimal coil has ' num2str(x(1)) ' loops per layer, ' num2str(x(2)) ' layers, with spacing of  ' num2str(x(3)) ' in between wires and cooper diameter of ' num2str(x(4)) ' (all in meters)']);
        disp(['C1 = ' num2str(tprobe.MatchNetw.C1) ', C2 = ' num2str(tprobe.MatchNetw.C2)])
        disp(['Peak sensitivity = ' num2str(tprobe.Sens.Sens_peak)  ', Average sensitivity = ' num2str(tprobe.Sens.SensMean)])
        disp('-------------------------------------------------------------------------------------------------------------------------------------------------------')
        % Data to use with Pspice simulator to compare results:
        disp('Data to use into Pspice simulator to double check results:')
        disp(['Coil: Rs = ' num2str(tprobe.Coil.Rs0) ', Ls = ' num2str(tprobe.Coil.Ls) ', Cs = ' num2str(tprobe.Coil.Cs) ', PspiceFreqDep = ' num2str(tprobe.Coil.PspiceFreqDep)])
        disp(['Matching network: C1 = ' num2str(tprobe.MatchNetw.C1) ', C2 = ' num2str(tprobe.MatchNetw.C2), ', C1_ESR = ' num2str(tprobe.MatchNetw.C1_ESR) ', C2_ESR = ' num2str(tprobe.MatchNetw.C2_ESR)])
        disp(['Rmatch = ' num2str(tprobe.MatchNetw.Rmatch) ', and self-resonant freq = ' num2str(tprobe.Coil.SelfRes)])
    else
        [~, tprobe] = sensitivityI2V(amp,coil,Freqs,graphs);
        tprobe.Type = 'Non-tuned';
        tprobe.Coil.PspiceFreqDep = abs(mean(tprobe.Coil.Emf_per_T./(2*pi*tprobe.Freqs.Freqs)));
        disp(['Non-tuned probe, StrandNr = ' num2str(tprobe.Coil.LitzStrandNr_glob)]);
        disp(['Estimated optimal coil has ' num2str(x(1)) ' loops per layer, ' num2str(x(2)) ' layers, with spacing of  ' num2str(x(3)) ' in between wires and cooper diameter of ' num2str(x(4)) ' (all in meters)']);
        disp(['Peak sensitivity = ' num2str(tprobe.Sens.Sens_peak)  ', Average sensitivity = ' num2str(tprobe.Sens.SensMean)])
        % Data to use with Pspice simulator to compare results:
        disp('-------------------------------------------------------------------------------------------------------------------------------------------------------')
        disp('Data to use into Pspice simulator to double check results:')
        disp(['Coil: Rs = ' num2str(tprobe.Coil.Rs0) ', Ls = ' num2str(tprobe.Coil.Ls) ', Cs = ' num2str(tprobe.Coil.Cs) ', PspiceFreqDep = ' num2str(tprobe.Coil.PspiceFreqDep)])     
        disp(['Self-resonant freq = ' num2str(tprobe.Coil.SelfRes)])
    end
    if tprobe.Sens.PenalyzeScaling ~= 1
        disp(['The optimization was aproaching the resonant frequency Fres = ' num2str(tprobe.Coil.SelfRes ) ', f0 = '  num2str(tprobe.Freqs.F0)])
    end
    disp('#######################################################################################################################################################')
    if tprobe.Coil.PenalyzeScaling > 1
        disp(['It has been penalized by ' num2str(tprobe.Coil.PenalyzeScaling)])
    end
    disp(' ')
end